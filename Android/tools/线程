Java通过Executors提供四种线程池，分别为：
newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。
newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。

ExecutorService cachedThreadPool = Executors.newFixedThreadPool(10);



结束线程
1.线程处于阻塞状态，如使用了sleep,同步锁的wait,socket中的receiver,accept等方法时，
会使线程处于阻塞状态。当调用线程的interrupt()方法时，会抛出InterruptException异常。
阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后break跳出循环状态，从而让我们有机会结束这个线程的执行。
通常很多人认为只要调用interrupt方法线程就会结束，实际上是错的，
一定要先捕获InterruptedException异常之后通过break来跳出循环，才能正常结束run方法。

2.线程未处于阻塞状态，使用isInterrupted()判断线程的中断标志来退出循环。当使用interrupt()方法时，
中断标志就会置true，和使用自定义的标志来控制循环是一样的道理。
代码示例：  最好  1  2  都考虑
当阻塞状态时，如果有interrupt()发生，
系统会抛出InterruptedException异常，
还会调用interrupted()
通过interrupt()结束
public class ThreadSafe extends Thread {
    public void run() {
        while (!isInterrupted()){ //非阻塞过程中通过判断中断标志来退出
            try{
                Thread.sleep(5*1000);//阻塞过程捕获中断异常来退出
            }catch(InterruptedException e){
                e.printStackTrace();
                break;//捕获到异常之后，执行break跳出循环。
            }
        }
    }
}
3.使用stop方法终止线程   (不推荐使用)
程序中可以直接使用thread.stop()来强行终止线程，但是stop方法是很危险的，就象突然关闭计算机电源，
而不是按正常程序关机一样，可能会产生不可预料的结果，不安全主要是：thread.stop()调用之后，
创建子线程的线程就会抛出ThreadDeatherror的错误，并且会释放子线程所持有的所有锁。一般任何进行加锁的代码块，
都是为了保护数据的一致性，如果在调用thread.stop()后导致了该线程所持有的所有锁的突然释放(不可控制)，
那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。
因此，并不推荐使用stop方法来终止线程。$cursor$