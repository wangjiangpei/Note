







 public @interface FooAnnotation {
   // some implementation here
 }

 // Excludes any field (or class) that is tagged with an "@FooAnnotation"
 private static class FooAnnotationExclusionStrategy implements ExclusionStrategy {
   public boolean shouldSkipClass(Class<?> clazz) {
     return clazz.getAnnotation(FooAnnotation.class) != null;
   }

   public boolean shouldSkipField(FieldAttributes f) {
     return f.getAnnotation(FooAnnotation.class) != null;
   }
 }


 Gson gson = new GsonBuilder()
 .setExclusionStrategies( new FooAnnotationExclusionStrategy())
 .create();

   public void btnClick(View view) {
         /** 需要过滤的字段 */
         String[] options = new String[] { "name" };
         /** 需要过滤字段的话 创建gson的话 就不是new 出来的 */
         ExclusionStrategy excludeStrategy = new SetterExclusionStrategy(options);
         gson = new GsonBuilder().setExclusionStrategies(excludeStrategy)
                 .create();
         String result = gson.toJson(ue);
         tv_result.setText(result);
     }

     /**
      * 过滤帮助类
      *
      * @author bamboo
      *
      */
     private static class SetterExclusionStrategy implements ExclusionStrategy {
         private String[] fields;

         public SetterExclusionStrategy(String[] fields) {
             this.fields = fields;

         }

         @Override
         public boolean shouldSkipClass(Class<?> arg0) {
             return false;
         }

         /**
          * 过滤字段的方法
          */
         @Override
         public boolean shouldSkipField(FieldAttributes f) {
             if (fields != null) {
                 for (String name : fields) {
                     if (f.getName().equals(name)) {
                         /** true 代表此字段要过滤 */
                         return true;
                     }
                 }
             }
             return false;
         }
     }